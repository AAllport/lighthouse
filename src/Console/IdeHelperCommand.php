<?php

namespace Nuwave\Lighthouse\Console;

use Illuminate\Console\Command;
use HaydenPierce\ClassFinder\ClassFinder;

class IdeHelperCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = '
        lighthouse:ide-helper
        {--W|write : Write the output to a file}
    ';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Compile the final GraphQL schema and print the result.';

    protected $schema = '# File generated by "php artisan lighthouse:ide-helper".
# Do not edit this file.
# This file should be ignored by git.';

    /**
     * Execute the console command.
     *
     * @param \Illuminate\Cache\Repository $cache
     * @param \Illuminate\Contracts\Filesystem\Filesystem $storage
     * @param \Nuwave\Lighthouse\GraphQL $graphQL
     * @return void
     * @throws \Exception
     */
    public function handle(): void
    {
        $directives = [];

        // Create all built-in directives
        collect(ClassFinder::getClassesInNamespace('Nuwave\Lighthouse\Schema\Directives'))
            ->each(function ($namespace) use (&$directives) {
                if (method_exists($namespace, 'definition')) {
                    $directives[$this->directiveName($namespace)] = $namespace;
                }
            });

        // Create all custom directives (may overwrite built-in directives)
        collect(ClassFinder::getClassesInNamespace('App\GraphQL\Directives'))
            ->each(function ($namespace) use (&$directives) {
                if (method_exists($namespace, 'definition')) {
                    $directives[$this->directiveName($namespace)] = $namespace;
                }
            });

        foreach ($directives as $directive) {
            $this->createSchemaDefinition($directive);
        }

        file_put_contents(base_path().'/.graphql/lighthouse.graphql', $this->schema);
        $this->info('Created ide-helper schema in '.base_path().'/.graphql/lighthouse.graphql.');
    }

    private function createSchemaDefinition($namespace)
    {
        $this->schema .= "\n\n".'# Directive class: '.$namespace."\n".trim($namespace::definition());
    }

    private function directiveName($namespace): string
    {
        $name = substr($namespace, strrpos($namespace, '\\') + 1);
        $name = str_replace('Directive', '', $name);

        return lcfirst($name);
    }
}
